import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { BaseClient, SDK_VERSION, addTracingExtensions } from '@sentry/core';
import { eventFromUnknownInput, eventFromMessage } from './eventbuilder.js';

/**
 * The Sentry Edge SDK Client.
 */
class EdgeClient extends BaseClient {
  /**
   * Creates a new Edge SDK instance.
   * @param options Configuration options for this SDK.
   */
   constructor(options) {
    options._metadata = options._metadata || {};
    options._metadata.sdk = options._metadata.sdk || {
      name: 'sentry.javascript.nextjs',
      packages: [
        {
          name: 'npm:@sentry/nextjs',
          version: SDK_VERSION,
        },
      ],
      version: SDK_VERSION,
    };

    // The Edge client always supports tracing
    addTracingExtensions();

    super(options);
  }

  /**
   * @inheritDoc
   */
   eventFromException(exception, hint) {
    return Promise.resolve(eventFromUnknownInput(this._options.stackParser, exception, hint));
  }

  /**
   * @inheritDoc
   */
   eventFromMessage(
    message,
    // eslint-disable-next-line deprecation/deprecation
    level = 'info',
    hint,
  ) {
    return Promise.resolve(
      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),
    );
  }

  /**
   * @inheritDoc
   */
   _prepareEvent(event, hint, scope) {
    event.platform = event.platform || 'edge';
    event.contexts = {
      ...event.contexts,
      runtime: _optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.runtime]) || {
        name: 'edge',
      },
    };
    event.server_name = event.server_name || process.env.SENTRY_NAME;
    return super._prepareEvent(event, hint, scope);
  }
}

export { EdgeClient };
//# sourceMappingURL=edgeclient.js.map
