"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processResults = void 0;
const ensureArray_1 = require("./ensureArray");
function index(array) {
    return (0, ensureArray_1.ensureArray)(array).reduce((acc, str) => {
        acc[str] = true;
        return acc;
    }, {});
}
function processResults(files, traverseResult, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const ignoreUnresolvedIdx = index(context.config.ignoreUnresolved);
        const ignoreUnusedIdx = index(context.config.ignoreUnused);
        const ignoreUnimportedIdx = index(context.config.ignoreUnimported);
        const unresolved = Array.from(traverseResult.unresolved).filter((x) => !ignoreUnresolvedIdx[x]);
        const unused = Object.keys(context.dependencies).filter((x) => !traverseResult.modules.has(x) &&
            !context.peerDependencies[x] &&
            !ignoreUnusedIdx[x]);
        const unimported = files
            .filter((x) => !traverseResult.files.has(x))
            .map((x) => x.replace(context.cwd + '/', ''))
            .filter((x) => !ignoreUnimportedIdx[x]);
        return {
            unresolved,
            unused,
            unimported,
            clean: !unresolved.length && !unused.length && !unimported.length,
        };
    });
}
exports.processResults = processResults;
