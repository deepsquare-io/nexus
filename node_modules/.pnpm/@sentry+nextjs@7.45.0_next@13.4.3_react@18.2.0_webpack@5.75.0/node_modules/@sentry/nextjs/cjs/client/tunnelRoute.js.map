{"version":3,"file":"tunnelRoute.js","sources":["../../../src/client/tunnelRoute.ts"],"sourcesContent":["import type { BrowserOptions } from '@sentry/react';\nimport { dsnFromString, logger } from '@sentry/utils';\n\nconst globalWithInjectedValues = global as typeof global & {\n  __sentryRewritesTunnelPath__?: string;\n};\n\n/**\n * Applies the `tunnel` option to the Next.js SDK options based on `withSentryConfig`'s `tunnelRoute` option.\n */\nexport function applyTunnelRouteOption(options: BrowserOptions): void {\n  const tunnelRouteOption = globalWithInjectedValues.__sentryRewritesTunnelPath__;\n  if (tunnelRouteOption && options.dsn) {\n    const dsnComponents = dsnFromString(options.dsn);\n    const sentrySaasDsnMatch = dsnComponents.host.match(/^o(\\d+)\\.ingest\\.sentry\\.io$/);\n    if (sentrySaasDsnMatch) {\n      const orgId = sentrySaasDsnMatch[1];\n      const tunnelPath = `${tunnelRouteOption}?o=${orgId}&p=${dsnComponents.projectId}`;\n      options.tunnel = tunnelPath;\n      __DEBUG_BUILD__ && logger.info(`Tunneling events to \"${tunnelPath}\"`);\n    } else {\n      __DEBUG_BUILD__ && logger.warn('Provided DSN is not a Sentry SaaS DSN. Will not tunnel events.');\n    }\n  }\n}\n"],"names":["dsnFromString","logger"],"mappings":";;;;AAGA,MAAA,wBAAA,GAAA,MAAA;;AAEA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,sBAAA,CAAA,OAAA,EAAA;AACA,EAAA,MAAA,iBAAA,GAAA,wBAAA,CAAA,4BAAA,CAAA;AACA,EAAA,IAAA,iBAAA,IAAA,OAAA,CAAA,GAAA,EAAA;AACA,IAAA,MAAA,aAAA,GAAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,MAAA,kBAAA,GAAA,aAAA,CAAA,IAAA,CAAA,KAAA,CAAA,8BAAA,CAAA,CAAA;AACA,IAAA,IAAA,kBAAA,EAAA;AACA,MAAA,MAAA,KAAA,GAAA,kBAAA,CAAA,CAAA,CAAA,CAAA;AACA,MAAA,MAAA,UAAA,GAAA,CAAA,EAAA,iBAAA,CAAA,GAAA,EAAA,KAAA,CAAA,GAAA,EAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,MAAA,GAAA,UAAA,CAAA;AACA,MAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAAC,YAAA,CAAA,IAAA,CAAA,CAAA,qBAAA,EAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAA,MAAA;AACA,MAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAAA,YAAA,CAAA,IAAA,CAAA,gEAAA,CAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA;;;;"}