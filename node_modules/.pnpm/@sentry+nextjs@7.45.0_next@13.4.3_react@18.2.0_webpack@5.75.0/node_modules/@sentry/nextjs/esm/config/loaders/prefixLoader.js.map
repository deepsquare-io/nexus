{"version":3,"file":"prefixLoader.js","sources":["../../../../src/config/loaders/prefixLoader.ts"],"sourcesContent":["import { escapeStringForRegex } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport type { LoaderThis } from './types';\n\ntype LoaderOptions = {\n  templatePrefix: string;\n  replacements: Array<[string, string]>;\n};\n\n/**\n * Inject templated code into the beginning of a module.\n *\n * Options:\n *   - `templatePrefix`: The XXX in `XXXPrefixLoaderTemplate.ts`, to specify which template to use\n *   - `replacements`: An array of tuples of the form `[<placeholder>, <replacementValue>]`, used for doing global\n *        string replacement in the template. Note: The replacement is done sequentially, in the order in which the\n *        replacement values are given. If any placeholder is a substring of any replacement value besides its own, make\n *        sure to order the tuples in such a way as to avoid over-replacement.\n */\nexport default function prefixLoader(this: LoaderThis<LoaderOptions>, userCode: string): string {\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const { templatePrefix, replacements } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  const templatePath = path.resolve(__dirname, `../templates/${templatePrefix}PrefixLoaderTemplate.js`);\n  // make sure the template is included when runing `webpack watch`\n  this.addDependency(templatePath);\n\n  // Fill in placeholders\n  let templateCode = fs.readFileSync(templatePath).toString();\n  replacements.forEach(([placeholder, value]) => {\n    const placeholderRegex = new RegExp(escapeStringForRegex(placeholder), 'g');\n    templateCode = templateCode.replace(placeholderRegex, value);\n  });\n\n  return `${templateCode}\\n${userCode}`;\n}\n"],"names":[],"mappings":";;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,YAAA,EAAA,QAAA,EAAA;AACA;AACA,EAAA,MAAA,EAAA,cAAA,EAAA,YAAA,EAAA,GAAA,YAAA,IAAA,IAAA,GAAA,IAAA,CAAA,UAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AACA;AACA,EAAA,MAAA,YAAA,GAAA,IAAA,CAAA,OAAA,CAAA,SAAA,EAAA,CAAA,aAAA,EAAA,cAAA,CAAA,uBAAA,CAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,CAAA,aAAA,CAAA,YAAA,CAAA,CAAA;AACA;AACA;AACA,EAAA,IAAA,YAAA,GAAA,EAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAAA,QAAA,EAAA,CAAA;AACA,EAAA,YAAA,CAAA,OAAA,CAAA,CAAA,CAAA,WAAA,EAAA,KAAA,CAAA,KAAA;AACA,IAAA,MAAA,gBAAA,GAAA,IAAA,MAAA,CAAA,oBAAA,CAAA,WAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,IAAA,YAAA,GAAA,YAAA,CAAA,OAAA,CAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,OAAA,CAAA,EAAA,YAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA;;;;"}